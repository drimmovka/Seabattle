digraph UML {
    node [shape=record];

    Action [label="{Action
    |+ Action(active_game_phases: std::unordered_set<GamePhase>) 
    |+ ~Action() 
    |+ execute(game: Game): void 
    |- canBeExecuted(game: Game): bool}"];

    ApplyBombing [label="{ApplyBombing
    |+ ApplyBombing() 
    |+ ~ApplyBombing() 
    |+ execute(game: Game): void}"];

    ApplyDoubleDamage [label="{ApplyDoubleDamage
    |+ ApplyDoubleDamage() 
    |+ ~ApplyDoubleDamage() 
    |+ execute(game: Game): void}"];

    ApplyScanner [label="{ApplyScanner
    |+ ApplyScanner(coords: Coords) 
    |+ ~ApplyScanner() 
    |+ execute(game: Game): void}"];

    Attack [label="{Attack
    |+ Attack(coords: Coords) 
    |+ ~Attack() 
    |+ execute(game: Game): void}"];

    InformAboutReadiness [label="{InformAboutReadiness
    |+ InformAboutReadiness() 
    |+ ~InformAboutReadiness() 
    |+ execute(game: Game): void}"];

    Load [label="{Load
    |+ Load(load_file_name: string) 
    |+ ~Load() 
    |+ execute(game: Game): void}"];

    Save [label="{Save
    |+ Save(save_file_name: string) 
    |+ ~Save() 
    |+ execute(game: Game): void}"];

    PlaceShipsRandomly [label="{PlaceShipsRandomly
    |+ PlaceShipsRandomly() 
    |+ ~PlaceShipsRandomly() 
    |+ execute(game: Game): void}"];

    SetSettings [label="{SetSettings
    |+ SetSettings(game_map_width: int, game_map_height: int, ship_sizes: vector<int>&) 
    |+ ~SetSettings() 
    |+ execute(game: Game): void}"];

    Stop [label="{Stop
    |+ Stop() 
    |+ ~Stop() 
    |+ execute(game: Game): void}"];

    CLIListener [label="{CLIListener
    |+ CLIListener() 
    |+ ~CLIListener() 
    |+ getAction(): Action*}"];

    CLIDisplayer [label="{* CLIDisplayer  
    |+ CLIDisplayer()  
    |+ ~CLIDisplayer()  
    |+ displayUserShipInfo(ships_manager: ShipsManager) : void  
    |+ displayUserGameMap(game_map_view_model: GameMapViewModel) : void  
    |+ displayEnemyGameMap(game_map_view_model: GameMapViewModel) : void  
    |+ displayMessage(const char *message) : void  
    |+ displayUserFrontAbilityType(ability_type: AbilityType) : void  
    }"];


    GameController [label="{GameController
    |+ GameController(game: Game) 
    |+ ~GameController() 
    |+ startGame(): void
    |- runGame(): void 
    |- displayGameInfo() : void 
    |- Game& _game
    |- CLIListener _listener
    |- CLIDisplayer _displayer}"];

    GameMapViewModel [label="{GameMapViewModel
    |+ GameMapViewModel(game_map: GameMap&) 
    |+ width(): int 
    |+ height(): int 
    |+ update(): void 
    |+ at(coords: Coords): const Cell&
    |- GameMap& game_map_
    |- int width_
    |- int height_
    |- std::vector(std::vector(Cell)) cells_
    |- void clear()
    |- bool coordsAreValid(Coords coords) const
    |- void setContentValue(Coords coords, Cell::Content content_value)
    |- void setShipSegmentHealthValue(Coords coords, int ship_segment_health_value)
    |- void setShottedValue(Coords coords, bool shotted_value)}"];

    Game [label="{Game
    |+ Game(GameDataHandler& game_data_handler) 
    |+ ~Game() 
    |+ isRunning(): bool 
    |+ score(): int 
    |+ roundWon(): bool 
    |+ over(): bool 
    |+ run(): void 
    |+ stop(): void 
    |+ currentPhase(): GamePhase 
    |+ userAvailableAbilityType(): AbilityType 
    |+ isEnemyMove(): bool 
    |+ userGameMapViewModel(): GameMapViewModel* 
    |+ enemyGameMapViewModel(): GameMapViewModel* 
    |+ gameData(): GameData* 
    |+ increaseScore(): void 
    |+ resetEnemy(): void 
    |+ tryToAddAbilitiesForUser(): void 
    |+ setSettings(int, int, std::vector<int>&): void 
    |+ userPlaceShipsRandomly(): void 
    |+ allowUserMakingMoves(): void 
    |+ userAttack(Coords): void 
    |+ userApplyAbility(iAbilitySpec*): void 
    |+ userSave(const std::string): void 
    |+ userLoad(const std::string): void 
    |+ enemyMakeMove(): void
    |- setGamePhase(GamePhase next_game_phase): void 
    |- initUser(): void 
    |- initEnemy(): void 
    |- placeShipsRandomly(ShipsManager *, GameMap *): void}"];

    GameData [label="{GameData
    |+ GamePhase game_phase 
    |+ bool is_enemy_move 
    |+ bool ability_has_been_applied 
    |+ int score 
    |+ std::vector<int> ship_sizes 
    |+ int game_map_width 
    |+ int game_map_height 
    |+ GameMap* user_game_map 
    |+ ShipsManager* user_ships_manager 
    |+ AbilitiesManager* user_abilities_manager 
    |+ int* user_damage 
    |+ bool* user_scanner_result 
    |+ GameMap* enemy_game_map 
    |+ ShipsManager* enemy_ships_manager 
    |+ int* enemy_alive_ships_number 
    |+ GameData() 
    |+ ~GameData() 
    |+ friend operator(std::ostream&, const GameData&): std::ostream& 
    |+ friend operator(std::istream&, GameData&): std::istream&}"];

    GameDataHandler [label="{* GameDataHandler 
    |+ saveGame(game_data: GameData*, save_file_name: string) : void
    |+ loadGame(game_data: GameData*, load_file_name: string) : void
    |- createHashFile(save_file_name: string) : void
    |- isLoadFileValid(load_file_name: string) : bool}"];
    
    Action -> ApplyBombing [label="extends" arrowhead="empty" style="dashed"];
    Action -> ApplyDoubleDamage [label="extends" arrowhead="empty" style="dashed"];
    Action -> ApplyScanner [label="extends" arrowhead="empty" style="dashed"];
    Action -> Attack [label="extends" arrowhead="empty" style="dashed"];
    Action -> InformAboutReadiness [label="extends" arrowhead="empty" style="dashed"];
    Action -> Load [label="extends" arrowhead="empty" style="dashed"];
    Action -> Save [label="extends" arrowhead="empty" style="dashed"];
    Action -> PlaceShipsRandomly [label="extends" arrowhead="empty" style="dashed"];
    Action -> SetSettings [label="extends" arrowhead="empty" style="dashed"];
    Action -> Stop [label="extends" arrowhead="empty" style="dashed"];

    GameController -> CLIListener [label="has" arrowhead="diamond" dir="forward" color="black"];
    GameController -> CLIDisplayer [label="has" arrowhead="diamond" dir="forward" color="black"];
    GameController -> Game [label="controls" arrowhead="diamond" dir="forward" color="black"];
    GameController -> GameMapViewModel [label="has" arrowhead="diamond" dir="forward" color="black"];
    
    Game -> GameData [label="has" arrowhead="diamond" dir="forward" color="black"];
    Game -> GameDataHandler [label="has" arrowhead="diamond" dir="forward" color="black"];
    
    GameDataHandler -> GameData [label="uses"];

    CLIListener -> Action [label="returns" arrowhead="vee" style="dashed"];
}